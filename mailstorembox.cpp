#include <iostream>
#include <vector>
#include <sstream>

#include <dirent.h>
#include <unistd.h>
#include <stdio.h>
#include <sys/stat.h>
#include <errno.h>

#include "mailstorembox.hpp"
#include "imapserver.hpp"
#include "imapsession.hpp"

#define MAILBOX_LIST_FILE_NAME ".mailboxlist"

// SYZYGY -- factor out the internal metadata message creation to a separate function so I can
// SYZYGY -- properly do locking, in the fullness of time

MailStoreMbox::MailStoreMbox(ImapSession *session, const char *usersInboxPath, const char *usersHomeDirectory) : MailStore(session)
{
    m_mailboxMessageCount = 0;
    m_recentCount = 0;
    m_firstUnseen = 0;
    m_uidNext = 0;
    m_uidValidity = 0;
    m_outFile = NULL;
    m_isOpen = false;
    m_isDirty = false;
    m_inboxPath = strdup(usersInboxPath);
    m_homeDirectory = strdup(usersHomeDirectory);
}

// The CreateMailbox method deals with two cases.  Either the mailbox name is "inbox" which
// is considered special, or the mailbox name is a path relative to the user's home directory.
// If the mail box name ends in a slash, which is what I'm using as a "path separator", then
// I create a mail directory, otherwise I create a mail file.
MailStore::MAIL_STORE_RESULT MailStoreMbox::CreateMailbox(const std::string &FullName)
{
    std::string MailboxName = FullName;
    MailStore::MAIL_STORE_RESULT result = MailStore::SUCCESS;

    if ((('i' == MailboxName[0]) || ('I' == MailboxName[0])) &&
	(('n' == MailboxName[1]) || ('N' == MailboxName[1])) &&
	(('b' == MailboxName[2]) || ('B' == MailboxName[2])) &&
	(('o' == MailboxName[3]) || ('O' == MailboxName[3])) &&
	(('x' == MailboxName[4]) || ('X' == MailboxName[4])) &&
	('\0' == MailboxName[5])) {
	result = MailStore::CANNOT_CREATE_INBOX;
    }
    else {
	std::string fullPath = m_homeDirectory;
	bool isDirectory = MailboxName.at(MailboxName.size()-1) == '/';

	while ('/' == MailboxName[MailboxName.size()-1]) {
	    MailboxName.erase(MailboxName.size()-1);
	}

	std::string::size_type offset = 0;
	std::string::size_type old_offset = 0;
	while ((MailStore::SUCCESS == result) && (std::string::npos != (offset = MailboxName.find("/", offset)))) {
	    // std::cout << "The offset is " << offset << " and the old offset is " << old_offset << std::endl;
	    if (0 != (offset - old_offset)) {
		struct stat sb;

		std::string component = MailboxName.substr(old_offset, offset - old_offset);
		// std::cout << "This component of the path is:  \"" << component << "\"" << std::endl;
		fullPath += "/";
		fullPath += component;

		// std::cout << "The fullpath is \"" << fullPath << "\"" << std::endl;
		if (-1 == lstat(fullPath.c_str(), &sb)) {
		    if (ENOENT == errno) {
			// Nothing with that name
			if (0 != mkdir(fullPath.c_str(), 0700)) {
			    // std::cout << "The mkdir failed" << std::endl;
			    result = MAILBOX_PATH_BAD;
			    m_errnoFromLibrary = errno;
			}
		    }
		    else {
			// std::cout << "The errno isn't ENOENT, but is " << strerror(errno) << std::endl;
			result = MAILBOX_PATH_BAD;
			m_errnoFromLibrary = errno;
		    }
		}
		else {
		    if (!S_ISDIR(sb.st_mode)) {
			// std::cout << "it appears as if \"" << fullPath << "\" is not a directory" << std::endl;
			result = MAILBOX_PATH_BAD;
		    }
		}
	    }
	    ++offset;
	    old_offset = offset;
	}

	if (result == SUCCESS) {
	    struct stat sb;

	    std::string lastPart = MailboxName.substr(old_offset);
	    // std::cout << "The last component of the path is:  \"" << lastPart << "\"" << std::endl;
	    fullPath += "/";
	    fullPath += lastPart;
	    if (-1 == lstat(fullPath.c_str(), &sb)) {
		if (ENOENT == errno) {
		    if (isDirectory) {
			if (0 != mkdir(fullPath.c_str(), 0700)) {
			    result = MAILBOX_PATH_BAD;
			    m_errnoFromLibrary = errno;
			}
		    }
		    else {
			struct tm *tm_now;
			time_t now;
			char timestring[1024];
			char tz_string[10];
			long zone_east;

			now = time(NULL);
			tm_now = localtime(&now);
			zone_east = -1 * timezone / 60 + (daylight ? 60 : 0);

			// The X-IMAP line contains the uidvalidity and uidnext values and the user-defined flags,
			// and is only present in pseudo messages generated by the library used by uw-imap and pine
			// and such.  There is a similar mechanism used to store the data in ordinary messages, which
			// uses an X-IMAPbase header with the same information.

			// That means that the precise format of this message doesn't matter, only the content of the
			// header fields matters.  In particular, I need a "From" line, and the RFC-2822 header lines
			// "From:", "Date:", "Subject:", "X-IMAP:", and "STATUS:" fields and a body with an explanation
			// that is meaningful to humans in case they see it.
			errno = 0;
			std::ofstream outFile(fullPath.c_str());
			if (outFile.good()) {
			    strftime(timestring, 1023, "%c", tm_now);
			    outFile << "From MAILER-DAEMON " << timestring << std::endl;
			    strftime(timestring, 1023, "%d %b %Y %X ", tm_now);
			    sprintf(tz_string, "% 03d%02d", zone_east / 60, zone_east % 60);
			    outFile << "Date: " << timestring << tz_string << std::endl;
			    outFile << "From: Mail Daemon <MAILER-DAEMON@" << m_session->GetServer()->GetFQDN() << ">" << std::endl;
			    outFile << "Subject: DO NOT DELETE THIS MESSAGE -- IT CONTAINS INTERNAL FOLDER DATA" << std::endl;
			    sprintf(timestring, "%010u %010u", now, 0);
			    outFile << "X-IMAP: " << timestring << std::endl;
			    outFile << "Status: RO" << std::endl << std::endl;
			    outFile << "This message contains metadata for this mail box and is not a real" << std::endl;
			    outFile << "message.  It is created automatically by the mail server software and" << std::endl;
			    outFile << "if deleted, important information about this mail box will be lost," << std::endl;
			    outFile << "don't delete it.  If you do happen to delete it by mistake, it will be" << std::endl;
			    outFile << "recreated with default data." << std::endl << std::endl;
			    outFile.close();
			}
			else {
			    result = MAILBOX_PATH_BAD;
			    m_errnoFromLibrary = errno;
			}
		    }
		}
		else {
		    result = MAILBOX_PATH_BAD;
		    m_errnoFromLibrary = errno;
		}
	    }
	    else {
		result = MAILBOX_ALREADY_EXISTS;
	    }
	}
    }
    return result;
}

// The DeleteMailbox method deals with two cases.  Either the mailbox name is "inbox" which
// is considered special, or the mailbox name is a path relative to the user's home directory.
// If the mail box name ends in a slash, which is what I'm using as a "path separator", then
// I create a mail directory, otherwise I create a mail file.
MailStore::MAIL_STORE_RESULT MailStoreMbox::DeleteMailbox(const std::string &FullName)
{
    std::string MailboxName = FullName;
    MailStore::MAIL_STORE_RESULT result = MailStore::SUCCESS;

    if ((('i' == MailboxName[0]) || ('I' == MailboxName[0])) &&
	(('n' == MailboxName[1]) || ('N' == MailboxName[1])) &&
	(('b' == MailboxName[2]) || ('B' == MailboxName[2])) &&
	(('o' == MailboxName[3]) || ('O' == MailboxName[3])) &&
	(('x' == MailboxName[4]) || ('X' == MailboxName[4])) &&
	('\0' == MailboxName[5])) {
	result = MailStore::CANNOT_DELETE_INBOX;
    }
    else {
	struct stat sb;

	std::string fullPath = m_homeDirectory;
	bool isDirectory = MailboxName.at(MailboxName.size()-1) == '/';

	while ('/' == MailboxName.at(MailboxName.size()-1)) {
	    MailboxName.erase(MailboxName.size()-1);
	}
	fullPath += "/";
	fullPath += MailboxName;
	
	if (-1 == lstat(fullPath.c_str(), &sb)) {
	    if (ENOENT == errno) {
		result = MAILBOX_DOES_NOT_EXIST;
	    }
	    else {
		result = GENERAL_FAILURE;
		m_errnoFromLibrary = errno;
	    }
	}
	else {
	    if (!S_ISDIR(sb.st_mode)) {
		if (0 != unlink(fullPath.c_str())) {
		    result = GENERAL_FAILURE;
		}
	    }
	    else {
		if (0 != rmdir(fullPath.c_str())) {
		    if (ENOTEMPTY == errno) {
			result = MAILBOX_IS_NOT_LEAF;
			m_errnoFromLibrary = 0;
		    }
		    else {
			result = GENERAL_FAILURE;
			m_errnoFromLibrary = errno;
		    }
		}
	    }
	}
    }

    return result;
}

MailStore::MAIL_STORE_RESULT MailStoreMbox::RenameMailbox(const std::string &SourceName, const std::string &DestinationName) {
    MailStore::MAIL_STORE_RESULT result = MailStore::SUCCESS;
    std::string sourcePath, destPath;
    bool isInbox = false;

    if ((('i' == SourceName[0]) || ('I' == SourceName[0])) &&
	(('n' == SourceName[1]) || ('N' == SourceName[1])) &&
	(('b' == SourceName[2]) || ('B' == SourceName[2])) &&
	(('o' == SourceName[3]) || ('O' == SourceName[3])) &&
	(('x' == SourceName[4]) || ('X' == SourceName[4])) &&
	('\0' == SourceName[5])) {
	sourcePath = m_inboxPath;
	isInbox = true;
    }
    else {
	struct stat sb;

	sourcePath = m_homeDirectory;
	sourcePath += "/";
	sourcePath += SourceName;

	if (-1 == lstat(sourcePath.c_str(), &sb)) {
	    if (ENOENT == errno) {
		result = MAILBOX_DOES_NOT_EXIST;
	    }
	    else {
		result = GENERAL_FAILURE;
		m_errnoFromLibrary = errno;
	    }
	}
    }

    if (MailStore::SUCCESS == result) {
	if ((('i' == DestinationName[0]) || ('I' == DestinationName[0])) &&
	    (('n' == DestinationName[1]) || ('N' == DestinationName[1])) &&
	    (('b' == DestinationName[2]) || ('B' == DestinationName[2])) &&
	    (('o' == DestinationName[3]) || ('O' == DestinationName[3])) &&
	    (('x' == DestinationName[4]) || ('X' == DestinationName[4])) &&
	    ('\0' == DestinationName[5])) {
	    result = MailStore::MAILBOX_ALREADY_EXISTS;
	}
	else {
	    destPath = m_homeDirectory;

	    if ('/' == DestinationName[DestinationName.size()-1]) {
		result = MailStore::MAILBOX_PATH_BAD;
	    }
	    else {
		std::string::size_type offset = 0;
		std::string::size_type old_offset = 0;
		while ((MailStore::SUCCESS == result) && (std::string::npos != (offset = DestinationName.find("/", offset)))) {
		    // std::cout << "The offset is " << offset << " and the old offset is " << old_offset << std::endl;
		    if (0 != (offset - old_offset)) {
			struct stat sb;

			std::string component = DestinationName.substr(old_offset, offset - old_offset);
			// std::cout << "This component of the path is:  \"" << component << "\"" << std::endl;
			destPath += "/";
			destPath += component;

			// std::cout << "The destpath is \"" << destPath << "\"" << std::endl;
			if (-1 == lstat(destPath.c_str(), &sb)) {
			    if (ENOENT == errno) {
				// Nothing with that name
				if (0 != mkdir(destPath.c_str(), 0700)) {
				    // std::cout << "The mkdir failed" << std::endl;
				    result = MAILBOX_PATH_BAD;
				}
			    }
			    else {
				// std::cout << "The errno isn't ENOENT, but is " << strerror(errno) << std::endl;
				result = MAILBOX_PATH_BAD;
				m_errnoFromLibrary = errno;
			    }
			}
			else {
			    if (!S_ISDIR(sb.st_mode)) {
				// std::cout << "it appears as if \"" << fullPath << "\" is not a directory" << std::endl;
				result = MAILBOX_PATH_BAD;
			    }
			}
		    }
		    ++offset;
		    old_offset = offset;
		}
		std::string lastPart = DestinationName.substr(old_offset);
		destPath += "/";
		destPath += lastPart;
	    }
	}
    }

    if (MailStore::SUCCESS == result) {
	// std::cout << "Attempting to rename \"" << sourcePath << "\" to \"" << destPath << "\"" << std::endl;
	if (0 == rename(sourcePath.c_str(), destPath.c_str())) {
	    if (isInbox) {
		struct tm *tm_now;
		time_t now;
		char timestring[1024];
		char tz_string[10];
		long zone_east;

		now = time(NULL);
		tm_now = localtime(&now);
		zone_east = -1 * timezone / 60 + (daylight ? 60 : 0);

		// The X-IMAP line contains the uidvalidity and uidnext values and the user-defined flags,
		// and is only present in pseudo messages generated by the library used by uw-imap and pine
		// and such.  There is a similar mechanism used to store the data in ordinary messages, which
		// uses an X-IMAPbase header with the same information.

		// That means that the precise format of this message doesn't matter, only the content of the
		// header fields matters.  In particular, I need a "From" line, and the RFC-2822 header lines
		// "From:", "Date:", "Subject:", "X-IMAP:", and "STATUS:" fields and a body with an explanation
		// that is meaningful to humans in case they see it.
		std::ofstream outFile(sourcePath.c_str());
		strftime(timestring, 1023, "%c", tm_now);
		outFile << "From MAILER-DAEMON " << timestring << std::endl;
		strftime(timestring, 1023, "%d %b %Y %X ", tm_now);
		sprintf(tz_string, "% 03d%02d", zone_east / 60, zone_east % 60);
		outFile << "Date: " << timestring << tz_string << std::endl;
		outFile << "From: Mail Daemon <MAILER-DAEMON@" << m_session->GetServer()->GetFQDN() << ">" << std::endl;
		outFile << "Subject: DO NOT DELETE THIS MESSAGE -- IT CONTAINS INTERNAL FOLDER DATA" << std::endl;
		sprintf(timestring, "%010u %010u", now, 0);
		outFile << "X-IMAP: " << timestring << std::endl;
		outFile << "Status: RO" << std::endl << std::endl;
		outFile << "This message contains metadata for this mail box and is not a real" << std::endl;
		outFile << "message.  It is created automatically by the mail server software and" << std::endl;
		outFile << "if deleted, important information about this mail box will be lost," << std::endl;
		outFile << "don't delete it.  If you do happen to delete it by mistake, it will be" << std::endl;
		outFile << "recreated with default data." << std::endl << std::endl;
		outFile.close();
	    }
	}
	else {
	    result = GENERAL_FAILURE;
	}
    }

    return result;
}

MailStore::MAIL_STORE_RESULT MailStoreMbox::MailboxClose()
{
    if (m_isOpen) {
	MailboxFlushBuffers(NULL);
	messageIndex.clear();
	m_isOpen = false;
    }
    return MailStore::SUCCESS;
}

MailStore::MAIL_STORE_RESULT MailStoreMbox::AddMessageToMailbox(const std::string &FullName, uint8_t *data, size_t length,
						 DateTime &createTime, uint32_t messageFlags, size_t *newUid) {
    std::string MailboxName = FullName;
    std::string fullPath;
    MailStore::MAIL_STORE_RESULT result = MailStore::SUCCESS;

    m_isDirty = true;
    if ((('i' == MailboxName[0]) || ('I' == MailboxName[0])) &&
	(('n' == MailboxName[1]) || ('N' == MailboxName[1])) &&
	(('b' == MailboxName[2]) || ('B' == MailboxName[2])) &&
	(('o' == MailboxName[3]) || ('O' == MailboxName[3])) &&
	(('x' == MailboxName[4]) || ('X' == MailboxName[4])) &&
	('\0' == MailboxName[5])) {
	fullPath = m_inboxPath;
    }
    else {
	while ('/' == MailboxName.at(MailboxName.size()-1)) {
	    MailboxName.erase(MailboxName.size()-1);
	}

	fullPath = m_homeDirectory;
	fullPath += "/";
	fullPath += MailboxName;

	struct stat sb;

	// std::cout << "The fullpath is \"" << fullPath << "\"" << std::endl;
	if (-1 == lstat(fullPath.c_str(), &sb)) {
	    if (ENOENT == errno) {
		result = MAILBOX_DOES_NOT_EXIST;
	    }
	    else {
		// std::cout << "The errno isn't ENOENT, but is " << strerror(errno) << std::endl;
		result = MAILBOX_PATH_BAD;
		m_errnoFromLibrary = errno;
	    }
	}
	else {
	    if (S_ISDIR(sb.st_mode)) {
		// std::cout << "it appears as if \"" << fullPath << "\" is not a directory" << std::endl;
		result = MAILBOX_NOT_SELECTABLE;
	    }
	}
    }

    if (SUCCESS == result) {
	// SYZYGY working here
	// SYZYGY -- what's wrong with this, well, I need to look at the incoming data and see if it's got header fields in it already
	// SYZYGY -- which I have to suppress or ignore.  I also have to do "From " line quoting and I need to suppress carriage returns
	// SYZYGY -- because this file, by definition, only has linefeeds.  That's just off the top of my head.
	try {
	    m_outFile = new std::ofstream(fullPath.c_str(), std::ios_base::out|std::ios_base::app);

	    *m_outFile << "\nFrom " << m_session->GetUser()->GetName() << "@" << m_session->GetServer()->GetFQDN() << " " << createTime.str() << "\n";
	    *m_outFile << "X-Status: ";
	    if (0 != (IMAP_MESSAGE_ANSWERED & messageFlags)) {
		*m_outFile << 'A';
	    }
	    if (0 != (IMAP_MESSAGE_FLAGGED & messageFlags)) {
		*m_outFile << 'F';
	    }
	    if (0 != (IMAP_MESSAGE_DRAFT & messageFlags)) {
		*m_outFile << 'T';
	    }
	    if (0 != (IMAP_MESSAGE_DELETED & messageFlags)) {
		*m_outFile << 'D';
	    }
	    *m_outFile << '\n';
	    *m_outFile << "Status: ";
	    if (0 != (IMAP_MESSAGE_SEEN & messageFlags)) {
		*m_outFile << 'R';
	    }
	    if (NULL != newUid) {
		*newUid = m_uidNext;
	    }
	    if (0 != (m_uidNext)) {
		*m_outFile << "X-UID: " << m_uidNext;
		++m_uidNext;
	    }
	    *m_outFile << '\n';
	    m_outFile->write((char *)data, length);  // SYZYGY -- I need to actually parse the message as it goes out, but this is okay until I get my stuff together
	}
	catch (DateTimeInvalidDateTime) {
	    result = MailStore::GENERAL_FAILURE;
	}
    }
    return result;
}

MailStore::MAIL_STORE_RESULT MailStoreMbox::AppendDataToMessage(const std::string &MailboxName, size_t uid, uint8_t *data, size_t length) {
    m_outFile->write((char *)data, length);  // SYZYGY -- I need to actually parse the message as it goes out, but this is okay until I get my stuff together
    return MailStore::SUCCESS; // SYZYGY 
}

MailStore::MAIL_STORE_RESULT MailStoreMbox::DoneAppendingDataToMessage(const std::string &MailboxName, size_t uid) {
    m_outFile->close();
    delete m_outFile;
    m_outFile = NULL;
    return MailStore::SUCCESS; // SYZYGY
}

unsigned MailStoreMbox::GetSerialNumber()
{
    return m_uidNext;
}


// SYZYGY -- I need to determine if IMAP has ever opened the mail box and act accordingly
bool MailStoreMbox::ParseMessage(std::ifstream &inFile, bool firstMessage, bool &countMessage, unsigned &uidValidity, unsigned &uidNext, MessageIndex_t &messageMetaData) {

    bool result = true;
    bool inHeader = true;
    bool seenStatus = false;
    bool seenUid = false;
    uint32_t flags = IMAP_MESSAGE_RECENT;
    unsigned uid = 0;
    std::string line;
    countMessage = true;

    messageMetaData.start = inFile.tellg();
    inFile >> line; // Skip over the "From " line
    if (!inFile.eof()) {
	std::ifstream::pos_type here;
	while (result && !inFile.eof()) {
	    here = inFile.tellg();
	    getline(inFile, line);
	    // std::cout << "The line is \"" << line << "\"" << std::endl;
	    if (!inFile.eof()) {
		if (inHeader) {
		    if (0 == line.length()) {
			inHeader = false;
		    }
		    else {
			if (firstMessage) {
			    if (0 == line.compare(0, 7, "X-IMAP:")) {
				countMessage = false;
				std::istringstream ss(line.substr(7));

				ss >> uidValidity;
				ss >> uidNext;
				++uidNext;
				// std::cout << "It's an X-IMAP line with uidValidity = " << uidValidity << " and uidNext = " << uidNext << std::endl;
				result = ss;
			    }
			    else if (0 == line.compare(0, 11, "X-IMAPbase:")) {
				std::istringstream ss(line.substr(11));

				ss >> uidValidity;
				ss >> uidNext;
				++uidNext;
				// std::cout << "It's an X-IMAPbase line with uidValidity = " << uidValidity << " and uidNext = " << uidNext << std::endl;
				result = ss;
			    }
			}
			if (0 == line.compare(0,  6, "X-UID:")) {
			    seenUid = true;
			    std::istringstream ss(line.substr(6));
			    ss >> uid;
			    // std::cout << "It's an X-UID line with uid = " << uid << std::endl;
			}
#if 0
			else if (0 == line.compare(0, 11, "X-Keywords:")) {
			    // std::cout << "It's an X-Keywords line" << std::endl;
			}
#endif // 0
			else if (0 == line.compare(0,  9, "X-Status:")) {
			    seenStatus = true;
			    // std::cout << "It's an X-Status line" << std::endl;
			    std::string flagString = line.substr(9);
			    if (std::string::npos != flagString.find('O', 0)) {
				flags &= ~IMAP_MESSAGE_RECENT;
			    }
			    if (std::string::npos != flagString.find('R', 0)) {
				flags |= IMAP_MESSAGE_SEEN;
			    }
			    if (std::string::npos != flagString.find('D', 0)) {
				flags |= IMAP_MESSAGE_DELETED;
			    }
			    if (std::string::npos != flagString.find('A', 0)) {
				flags |= IMAP_MESSAGE_ANSWERED;
			    }
			    if (std::string::npos != flagString.find('F', 0)) {
				flags |= IMAP_MESSAGE_FLAGGED;
			    }
			    if (std::string::npos != flagString.find('T', 0)) {
				flags |= IMAP_MESSAGE_DRAFT;
			    }
			}
			else if (0 == line.compare(0, 7, "Status:")) {
			    seenStatus = true;
			    // std::cout << "It's an X-Status line" << std::endl;
			    std::string flagString = line.substr(7);
			    if (std::string::npos != flagString.find('O', 0)) {
				flags &= ~IMAP_MESSAGE_RECENT;
			    }
			    if (std::string::npos != flagString.find('R', 0)) {
				flags |= IMAP_MESSAGE_SEEN;
			    }
			    if (std::string::npos != flagString.find('D', 0)) {
				flags |= IMAP_MESSAGE_DELETED;
			    }
			    if (std::string::npos != flagString.find('A', 0)) {
				flags |= IMAP_MESSAGE_ANSWERED;
			    }
			    if (std::string::npos != flagString.find('F', 0)) {
				flags |= IMAP_MESSAGE_FLAGGED;
			    }
			    if (std::string::npos != flagString.find('T', 0)) {
				flags |= IMAP_MESSAGE_DRAFT;
			    }
			}
		    }
		}
	    }
	    if (0 == line.compare(0, 5, "From ")) {
		// std::cout << "It's a new message" << std::endl;
		inFile.seekg(here);
		break;
	    }
	}
    }
    if (result && countMessage) {
	messageMetaData.uid = uid;
	messageMetaData.flags = flags;
	messageMetaData.imapLength = 0; // SYZYGY -- Finding this could be complicated
	messageMetaData.isDirty = !seenStatus || !seenUid;
    }

    return result;
}


// Fundamentally, the proximate purpose behind MailboxOpen is to populate these values:
//    mailboxMessageCount
//    recentCount
//    firstUnseen
//    uidNext
//    uidValidity
// and to get a list of the flags and permanent flags
// to do that, I need to at least partly parse the entire file, I may want to parse and cache 
// the results of that parsing for things like message sequence numbers, UID's, and offsets in the
// file
MailStore::MAIL_STORE_RESULT MailStoreMbox::MailboxOpen(const std::string &FullName, bool readWrite) {
    std::string MailboxName = FullName;
    std::string fullPath;
    MailStore::MAIL_STORE_RESULT result = MailStore::SUCCESS;

    if ((('i' == MailboxName[0]) || ('I' == MailboxName[0])) &&
	(('n' == MailboxName[1]) || ('N' == MailboxName[1])) &&
	(('b' == MailboxName[2]) || ('B' == MailboxName[2])) &&
	(('o' == MailboxName[3]) || ('O' == MailboxName[3])) &&
	(('x' == MailboxName[4]) || ('X' == MailboxName[4])) &&
	('\0' == MailboxName[5])) {
	fullPath = m_inboxPath;
    }
    else {
	while ('/' == MailboxName.at(MailboxName.size()-1)) {
	    MailboxName.erase(MailboxName.size()-1);
	}

	fullPath = m_homeDirectory;
	fullPath += "/";
	fullPath += MailboxName;

	struct stat sb;

	// std::cout << "The fullpath is \"" << fullPath << "\"" << std::endl;
	if (-1 == lstat(fullPath.c_str(), &sb)) {
	    if (ENOENT == errno) {
		result = MAILBOX_DOES_NOT_EXIST;
	    }
	    else {
		// std::cout << "The errno isn't ENOENT, but is " << strerror(errno) << std::endl;
		result = MAILBOX_PATH_BAD;
		m_errnoFromLibrary = errno;
	    }
	}
	else {
	    if (S_ISDIR(sb.st_mode)) {
		// std::cout << "it appears as if \"" << fullPath << "\" is not a directory" << std::endl;
		result = MAILBOX_NOT_SELECTABLE;
	    }
	}
    }

    if (result == SUCCESS) {
	std::ifstream inFile(fullPath.c_str());
	bool firstMessage = true;
	bool parseSuccess;
	bool countMessage;
	MessageIndex_t messageMetaData;

	m_mailboxMessageCount = 0;
	m_recentCount = 0;
	m_firstUnseen = 0;
	m_uidNext = 0;
	m_uidValidity = 0;
	while(!inFile.eof() && (parseSuccess = ParseMessage(inFile, firstMessage, countMessage, m_uidValidity, m_uidNext, messageMetaData))) {
	    if (countMessage) {
		++m_mailboxMessageCount;
		if (0 != (MailStore::IMAP_MESSAGE_RECENT & messageMetaData.flags)) {
		    ++m_recentCount;
		}
		if ((0 == m_firstUnseen) && (0 != (MailStore::IMAP_MESSAGE_SEEN & messageMetaData.flags))) {
		    m_firstUnseen = m_mailboxMessageCount;
		}
		if (0 == messageMetaData.uid) {
		    messageMetaData.uid = m_uidNext++;
		    m_isDirty = true;
		}
		messageIndex.push_back(messageMetaData);
	    }
	    firstMessage = false;
	}
	inFile.close();
	// SYZYGY -- if parseSuccess is not true, it should return an error

	for (int i=0; i < messageIndex.size(); ++i) {
	    std::cout << "Message " << i << " has uid " << messageIndex[i].uid;
	    if (messageIndex[i].isDirty) {
		std::cout << " and is dirty";
	    }
	    std::cout << std::endl;
	}
	m_isOpen = true;
    }
    return result;
}


MailStore::MAIL_STORE_RESULT MailStoreMbox::GetMailboxCounts(const std::string &FullName, uint32_t which, unsigned &messageCount,
							     unsigned &recentCount, unsigned &uidNext, unsigned &uidValidity,
							     unsigned &firstUnseen) {
    std::string MailboxName = FullName;
    std::string fullPath;
    MailStore::MAIL_STORE_RESULT result = MailStore::SUCCESS;

    if ((('i' == MailboxName[0]) || ('I' == MailboxName[0])) &&
	(('n' == MailboxName[1]) || ('N' == MailboxName[1])) &&
	(('b' == MailboxName[2]) || ('B' == MailboxName[2])) &&
	(('o' == MailboxName[3]) || ('O' == MailboxName[3])) &&
	(('x' == MailboxName[4]) || ('X' == MailboxName[4])) &&
	('\0' == MailboxName[5])) {
	fullPath = m_inboxPath;
    }
    else {
	while ('/' == MailboxName.at(MailboxName.size()-1)) {
	    MailboxName.erase(MailboxName.size()-1);
	}

	fullPath = m_homeDirectory;
	fullPath += "/";
	fullPath += MailboxName;

	struct stat sb;

	// std::cout << "The fullpath is \"" << fullPath << "\"" << std::endl;
	if (-1 == lstat(fullPath.c_str(), &sb)) {
	    if (ENOENT == errno) {
		result = MAILBOX_DOES_NOT_EXIST;
	    }
	    else {
		// std::cout << "The errno isn't ENOENT, but is " << strerror(errno) << std::endl;
		result = MAILBOX_PATH_BAD;
		m_errnoFromLibrary = errno;
	    }
	}
	else {
	    if (S_ISDIR(sb.st_mode)) {
		// std::cout << "it appears as if \"" << fullPath << "\" is not a directory" << std::endl;
		result = MAILBOX_NOT_SELECTABLE;
	    }
	}
    }

    if (result == SUCCESS) {
	std::ifstream inFile(fullPath.c_str());
	bool firstMessage = true;
	bool parseSuccess;
	bool countMessage;
	MessageIndex_t messageMetaData;

	messageCount = 0;
	recentCount = 0;
	firstUnseen = 0;
	uidNext = 0;
	uidValidity = 0;

	while(!inFile.eof() && (parseSuccess = ParseMessage(inFile, firstMessage, countMessage, uidValidity, uidNext, messageMetaData))) {
	    if (countMessage) {
		++messageCount;
		if (0 != (MailStore::IMAP_MESSAGE_RECENT & messageMetaData.flags)) {
		    ++recentCount;
		}
		if ((0 == firstUnseen) && (0 != (MailStore::IMAP_MESSAGE_SEEN & messageMetaData.flags))) {
		    firstUnseen = messageCount;
		}
		if (0 == messageMetaData.uid) {
		    messageMetaData.uid = uidNext++;
		}
	    }
	    firstMessage = false;
	}
	inFile.close();
	// SYZYGY -- if parseSuccess is not true, it should return an error
    }
    return result;
}

std::string MailStoreMbox::GetMailboxUserPath() const {
}

MailStore::MAIL_STORE_RESULT MailStoreMbox::MailboxFlushBuffers(NUMBER_LIST *nowGone)
{
    if (m_isDirty) {
	// SYZYGY
    }
    return MailStore::SUCCESS;
}


MailStore::MAIL_STORE_RESULT MailStoreMbox::MailboxUpdateStats(NUMBER_LIST *nowGone)
{
    return MailStore::SUCCESS;
}


// This function is different from ListAll in three ways.  First, it doesn't know that "inbox" is
// magic.  Second, it doesn't refer to MailStoreMbox's private data, third, it needs a precompiled
// regex instead of a pattern
bool MailStoreMbox::ListAllHelper(const regex_t *compiled_regex, const char *home_directory, const char *working_dir, MAILBOX_LIST *result, int maxdepth)
{
    bool returnValue = false;
    char full_path[PATH_MAX];

    sprintf(full_path, "%s/%s", home_directory, working_dir);
    DIR *directory = opendir(full_path);
    if (NULL != directory)
    {
	struct dirent *entry;
	while (NULL != (entry = readdir(directory)))
	{
	    if ((('.' != entry->d_name[0]) || ('\0' != entry->d_name[1])) &&
		(('.' != entry->d_name[0]) || ('.' != entry->d_name[1]) || ('\0' != entry->d_name[2])))
	    {
		returnValue = true;
		struct stat stat_buf;
		char short_path[PATH_MAX];

		sprintf(short_path, "%s/%s", working_dir, entry->d_name);
		sprintf(full_path, "%s/%s", home_directory, short_path);
		if (0 == lstat(full_path, &stat_buf))
		{
		    MAILBOX_NAME name;

		    name.name = short_path;
		    name.attributes = 0;
		    if (!S_ISREG(stat_buf.st_mode))
		    {
			name.attributes = MailStore::IMAP_MBOX_NOSELECT;
			if (S_ISDIR(stat_buf.st_mode))
			{
			    // I don't go down any more if the depth is zero
			    if (maxdepth != 0)
			    {
				if (ListAllHelper(compiled_regex, home_directory, short_path, result, (maxdepth > 0) ? maxdepth-1 : maxdepth))
				{
				    name.attributes |= MailStore::IMAP_MBOX_HASCHILDREN;
				}
			    }
			}
		    }
		    else
		    {
			name.attributes = MailStore::IMAP_MBOX_NOINFERIORS;
			if (isMailboxInteresting(name.name))
			{
			    name.attributes |= MailStore::IMAP_MBOX_MARKED;
			}
			else
			{
			    name.attributes |= MailStore::IMAP_MBOX_UNMARKED;
			}
		    }
		    if (0 == regexec(compiled_regex, short_path, 0, NULL, 0))
		    {
			result->push_back(name);
		    }
		}
	    }
	}
	closedir(directory);
    }
    return returnValue;
}

// c-client checks the ctime against the atime of the file in question and returns
// true if access time is after create or modify, else false
bool MailStoreMbox::isMailboxInteresting(const std::string path)
{
    int result = false;
    struct stat stat_buf;

    if (0 == lstat(path.c_str(), &stat_buf))
    {
	result = (stat_buf.st_atime < stat_buf.st_ctime) || (stat_buf.st_atime < stat_buf.st_mtime);
    }
    return result;
}

// If pattern is n characters long, then the "regex" destination buffer must be
// 5n+3 characters long to be assured of being long enough.
static void ConvertPatternToRegex(const char *pattern, char *regex, char isForLsub = false) {
    char lastchar;

    *regex++ = '^';
    if (isForLsub) {
	*regex++ = '(';
    }
    while('\0' != *pattern) {
	lastchar = *pattern;
	switch(*pattern) {
	case '^':
	case ',':
	case '.':
	case '[':
	case '$':
	case '(':
	case ')':
	case '|':
	case '+':
	case '?':
	case '{':
	case '\\':
	    *regex++ = '\\';
	    *regex++ = *pattern;
	    break;

	case '*':
	    *regex++ = '.';
	    *regex++ = '*';
	    break;

	case '%':
	    *regex++ = '[';
	    *regex++ = '^';
	    *regex++ = '/';
	    *regex++ = ']';
	    *regex++ = '*';
	    break;

	default:
	    *regex++ = *pattern;
	    break;
	}
	++pattern;
    }
    if (isForLsub) {
	*regex++ = ')';
	if ('%' != lastchar) {
	    *regex++ = '$';
	}
    }
    else {
	*regex++ = '$';
    }
    *regex = '\0';
}


void MailStoreMbox::ListAll(const char *pattern, MAILBOX_LIST *result)
{
    struct stat buff;
    regex_t compiled_regex;
    char *regex = new char[3+5*strlen(pattern)];

    ConvertPatternToRegex(pattern, regex);

    // For the mbox mail store, a list is usually the directory listing 
    // of some place on the computer.  It's usually under the home directory
    // of the user.  The exception is "INBOX" (case insensitive) which is
    // special-cased.

    // I'm going to do the matching using the available regular expression library.
    // To do that, I need to convert the pattern to a regular expression.
    // To convert the pattern to a regular expression, I need to change characters
    // in the pattern into regex equivalents.  "*" becomes ".*", "%" becomes
    // "[^/]*", and the characters "^", ".", "[", "$", "(", ")", "|", "+", "?", "{"
    // and "\" must be escaped by prepending a backslash.

    // The regex must be compiled twice.  For matching "inbox", I enable ignoring 
    // case.  For the regular matches, I'll use case-specific matching.
    if (0 == regcomp(&compiled_regex, regex, REG_EXTENDED | REG_ICASE | REG_NOSUB))
    {
	if (0 == regexec(&compiled_regex, "inbox", 0, NULL, 0))
	{
	    MAILBOX_NAME name;

	    name.name = "INBOX";
	    name.attributes = MailStore::IMAP_MBOX_NOINFERIORS;
	    if (isMailboxInteresting(m_inboxPath))
	    {
		name.attributes |= MailStore::IMAP_MBOX_MARKED;
	    }
	    else
	    {
		name.attributes |= MailStore::IMAP_MBOX_UNMARKED;
	    }
	    result->push_back(name);
	}
	regfree(&compiled_regex);
    }

    // So, I've special-cased "inbox".  For the rest, I was originally going to
    // recurse down the directory tree starting in the user's home directory and
    // adding each result that matches the pattern.

    // The problem is that the performance of this sucks.  There are two ways to
    // improve the performance of list that immediately come to mind.  First, don't
    // start at the home directory, but start somewhere underneath it, if possible.
    // Second, don't recurse down unless the pattern allows it.

    // To do the first, I skip over the non-wildcard characters and then back up to
    // to the preceeding separator character and that's where I start recursing.

    // To do the second, well, I can't do it if there are any stars in the pattern,
    // but I can count the number of separators in the wildcarded section and only
    // recurse down that many.

    // The matching is done by converting
    // the pattern into a regular expression and then seeing if that regular
    // expression matches the strings
    if (0 == regcomp(&compiled_regex, regex, REG_EXTENDED | REG_NOSUB))
    {
	char base_path[PATH_MAX];
	size_t static_len;
	// maxdepth starts at 1 so I can set HASCHILDREN properly
	int maxdepth = 1;

	static_len = strcspn(pattern, "%*");
	for (int i=static_len; pattern[i] != '\0'; ++i)
	{
	    if ('*' == pattern[i])
	    {
		// maxdepth of -1 implies no limit
		maxdepth = -1;
		break;
	    }
	    if ('/' == pattern[i])
	    {
		++maxdepth;
	    }
	}
	for (; static_len>0; --static_len)
	{
	    if ('/' == pattern[static_len])
	    {
		break;
	    }
	}
	sprintf(base_path, "%s/%.*s", m_homeDirectory, static_len, pattern);
	DIR *directory = opendir(base_path);
	if (NULL != directory)
	{
	    struct dirent *entry;
	    while (NULL != (entry = readdir(directory)))
	    {
		if ((('.' != entry->d_name[0]) || ('\0' != entry->d_name[1])) &&
		    (('.' != entry->d_name[0]) || ('.' != entry->d_name[1]) || ('\0' != entry->d_name[2])))
		{
		    char short_path[PATH_MAX];
		    char full_path[PATH_MAX];

		    if (static_len > 0)
		    {
			sprintf(short_path, "%.*s/%s", static_len, pattern, entry->d_name);
		    }
		    else
		    {
			strcpy(short_path, entry->d_name);
		    }
		    sprintf(full_path, "%s/%s", m_homeDirectory, short_path);
		    struct stat stat_buf;
		    if (0 == lstat(full_path, &stat_buf))
		    {
			MAILBOX_NAME name;

			name.name = short_path;
			name.attributes = 0;
			if (!S_ISREG(stat_buf.st_mode))
			{
			    name.attributes = MailStore::IMAP_MBOX_NOSELECT;
			    if (S_ISDIR(stat_buf.st_mode))
			    {
				if (ListAllHelper(&compiled_regex, m_homeDirectory, short_path, result, maxdepth))
				{
				    name.attributes |= MailStore::IMAP_MBOX_HASCHILDREN;
				}
			    }
			}
			else
			{
			    name.attributes = MailStore::IMAP_MBOX_NOINFERIORS;
			    if (isMailboxInteresting(name.name))
			    {
				name.attributes |= MailStore::IMAP_MBOX_MARKED;
			    }
			    else
			    {
				name.attributes |= MailStore::IMAP_MBOX_UNMARKED;
			    }
			}
			if (0 == regexec(&compiled_regex, short_path, 0, NULL, 0))
			{
			    result->push_back(name);
			}
		    }
		}
	    }
	    closedir(directory);
	}
	regfree(&compiled_regex);
    }
    delete[] regex;
}



void MailStoreMbox::ListSubscribed(const char *pattern, MAILBOX_LIST *result)
{
    bool inbox_matches = false;
    // In the mbox world, at least on those systems handled by c-client, it appears
    // as if the list of folders subscribed to is stored in a file, one per line,
    // so to do this command, I just read that file and match against pattern.

    // First, convert the pattern to a regex and compile the regex
    regex_t compiled_regex;
    // 3+5*strlen(pattern) works for list, but I'm going to be putting the 
    // pattern in parentheses so I need 5+5*strlen for lsub
    char *regex = new char[5+5*strlen(pattern)];

    ConvertPatternToRegex(pattern, regex, true);

    // The regex must be compiled twice.  For matching "inbox", I enable ignoring 
    // case.  For the regular matches, I'll use case-specific matching.
    if (0 == regcomp(&compiled_regex, regex, REG_EXTENDED | REG_ICASE | REG_NOSUB))
    {
	if (0 == regexec(&compiled_regex, "inbox", 0, NULL, 0))
	{
	    // If I get here, then I know that inbox matches the pattern.
	    // However, I don't know if I'm subscribed to inbox.  I'll have to
	    // look for that as part of the processing of the subscription
	    // file
	    inbox_matches = true;
	}
	regfree(&compiled_regex);
    }

    std::string file_name = m_homeDirectory;
    file_name += "/" MAILBOX_LIST_FILE_NAME;
    std::ifstream inFile(file_name.c_str());
    if (0 == regcomp(&compiled_regex, regex, REG_EXTENDED))
    {
	while (!inFile.eof())
	{
	    std::string line;
	    inFile >> line;
	    // I have to check this here, because it's only set when attempting
	    // to read past the end of the file
	    if (!inFile.eof())
	    {
		const char *cstr_line;

		cstr_line = line.c_str();
		if (inbox_matches &&
		    (('i' == cstr_line[0]) || ('I' == cstr_line[0])) &&
		    (('n' == cstr_line[1]) || ('N' == cstr_line[1])) &&
		    (('b' == cstr_line[2]) || ('B' == cstr_line[2])) &&
		    (('o' == cstr_line[3]) || ('O' == cstr_line[3])) &&
		    (('x' == cstr_line[4]) || ('X' == cstr_line[4])) &&
		    ('\0' == cstr_line[5]))
		{
		    MAILBOX_NAME name;

		    name.name = "INBOX";
		    name.attributes = MailStore::IMAP_MBOX_NOINFERIORS;
		    if (isMailboxInteresting(m_inboxPath))
		    {
			name.attributes |= MailStore::IMAP_MBOX_MARKED;
		    }
		    else
		    {
			name.attributes |= MailStore::IMAP_MBOX_UNMARKED;
		    }
		    result->push_back(name);
		}
		else
		{
		    regmatch_t match;

		    if (0 == regexec(&compiled_regex, cstr_line, 1, &match, 0))
		    {
			MAILBOX_NAME name;

			// With list, I need to set the flags correctly, with LSUB, I don't.
			// So says RFC 3501 section 6.3.9
			// I do have to handle the weirdness associated with the trailing % flag, though
			// which is what all the "match" stuff is about
			if (match.rm_so != -1) {
			    name.name = line;
			    name.name.erase(match.rm_eo);
			    name.attributes = 0;
			    if (name.name != line) {
				name.attributes |= IMAP_MBOX_NOSELECT;
				name.attributes |= IMAP_MBOX_HASCHILDREN;
			    }
			    result->push_back(name);
			}
		    }
		}
	    }
	}
	regfree(&compiled_regex);
    }
}



void MailStoreMbox::BuildMailboxList(const char *ref, const char *pattern, MAILBOX_LIST *result, bool listAll)
{
    char *ref2, *pat2;

    ref2 = strdup(ref);
    pat2 = strdup(pattern);
    if (listAll)
    {
	ListAll(pattern, result);
    }
    else
    {
	ListSubscribed(pattern, result);
    }
}



MailStore::MAIL_STORE_RESULT MailStoreMbox::SubscribeMailbox(const std::string &MailboxName, bool isSubscribe)
{
    MailStore::MAIL_STORE_RESULT result = MailStore::SUCCESS;
    bool foundLine = false;
    std::string in_file_name = m_homeDirectory;
    in_file_name += "/" MAILBOX_LIST_FILE_NAME;
    std::string out_file_name = m_homeDirectory;
    out_file_name += "/" MAILBOX_LIST_FILE_NAME;
    out_file_name += ".new";
    std::ifstream inFile(in_file_name.c_str());
    std::ofstream outFile(out_file_name.c_str());
    while (!inFile.eof())
    {
	std::string line;
	inFile >> line;
	// I have to check this here, because it's only set when attempting
	// to read past the end of the file
	if (!inFile.eof())
	{
	    if (MailboxName == line) {
		foundLine = true;
		if (isSubscribe) {
		    outFile << line << std::endl;
		}
	    }
	    else {
		outFile << line << std::endl;
	    }
	}
    }
    if (isSubscribe) {
	if (foundLine) {
	    result = MailStore::MAILBOX_ALREADY_SUBSCRIBED;
	}
	else {
	    outFile << MailboxName << std::endl;
	}
    }
    else {
	if (!foundLine) {
	    result = MailStore::MAILBOX_NOT_SUBSCRIBED;
	}
    }

    ::rename(out_file_name.c_str(), in_file_name.c_str());
    return result;
}


MailStoreMbox::~MailStoreMbox()
{
    if (m_isOpen) {
	MailboxClose();
    }
    if (NULL != m_outFile) {
	m_outFile->close();
	delete m_outFile;
	m_outFile = NULL;
    }
}


MailStore::MAIL_STORE_RESULT MailStoreMbox::DeleteMessage(const std::string &MailboxName, size_t uid) {
    return MailStore::SUCCESS; // SYZYGY
}

