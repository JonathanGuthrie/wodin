I have been critical of the idea of unit tests for a long time.  I have pointed
that unit tests as implemented fall in to one of two categores:  trivial and
impossible.  The impossible tests are, well, impossible so they are never done
and the trivial tests are easily replaced with manual, integrated, tests so
they're just so much wasted work.

Further, every time I've asked unit test fans about why they demand that the
entire world produce unit tests for all the world's code, the answers I get
are tautologies like "that way, your code will be tested" or statements about
the quality of their code like "I would never produce a program without unit
tests".  To my mind, neither of those sorts of responses is particularly
helpful in determining whether or not I should go to the extra work (something
like three to five times as much work as it took to write the code that is
under test!) to produce unit tests.

It has been claimed that I'm missing the benefits, and that's true, but since
I have made multiple strenuous good-faith attempts to find out what those 
benefits are and since the people who supposedly know about those benefits 
have been entirely unable to express them to me in anything like an coherent
fashion, that claim leaves me unmoved.  I will produce unit tests when those
who sign my checks insist on them, and no sooner.

After that three-paragraph rant on unit tests, it may surprise you to know that
I am planning a sort of a unit test suite for the IMAP locking code.  Indeed,
this document forms the basis of the design for those tests.  I am doing these
test in this way because the logic for locking lives in two different places,
the command processing and the low-level mail store driver.  In order to isolate
problems, I need to separate the tests and that's easiest done with a test
framework specially implemented to make it easy.  If I'm going to the trouble of
building a test framework, then it is easy enough to automate the tests, which
result in a unit test suite, at least for the command processing.

The way locking in the mail store interacts with the command processor is by
returning the enum value CANNOT_COMPLETE_ACTION instead of success.  That means
that any method that could return a MAIL_STORE_RESULT value can fail to acquire
a lock and, therefore, any command that calls one of those methods needs to have
its locking logic tested.  One wrinkle:  A mail store is not permitted to return
CANNOT_COMPLETE_ACTION if MailboxLock has already been called.  That allows the
implmentor (that is, me) to concentrate the locking logic for situations where
it would be complicated if each call could fail.  This state ends when MailboxUnlock
is called, which is the last thing that is not permitted to return
CANNOT_COMPLETE_ACTION.

Another wrinkle is this:  A close cannot fail from the client's perspective.  However,
a mailstore's close method might certainly fail due to lock contention.  So, what's
going to happen is that the namespace will record the fact that the mail store remains
open and will periodically attempt to close it.  That operation will be retried without
limit until another session opens the mail box or the mailbox is finally successfully
closed.  Okay, this will require making several modifications to the Namespace class.
First, mailboxClose has to understand the response from the mail store's mailboxClose
call.  If that call fails, then it needs to be put in a map of pending mailboxes.
Second, the mailboxOpen must look in the list of pending closes before opening a new
mail box.  Third, I need to modify mailboxUpdateStats to retry the close if the pending
mailboxes map is not empty.

These are the methods that return a MAIL_STORE_RESULT:
    CreateMailbox
    DeleteMailbox
    RenameMailbox
    MailboxClose
    SubscribeMailbox
    AddMessageToMailbox
    AppendDataToMessage
    DoneAppendingDataToMessage
    MailboxOpen
    ListDeletedMessages
    ExpungeThisUid
    GetMailboxCounts
    MessageList
    MessageUpdateFlags
    MailboxFlushBuffers
    MailboxUpdateStats
    DeleteMessage
    OpenMessageFile
    MailboxLock
    MailboxUnlock

CreateMailbox is called in ImapSession::AuthenticateHandler, ImapSession::LoginHandlerExecute, ImapSession::CreateHandlerExecute

The thing is, ImapSession::AuthenticateHandler and ImapSession::LoginHandlerExecute both attempt to create the mailbox INBOX, which is not permitted in IMAP.  I do this operation here in order to be certain that there is a mailbox called INBOX as soon as someone logs in.  Anyway.  I need to remove the calls because not only do they do nothing, they aren't permitted to do anything.  Okay, they're removed.

So, testing CreateMailbox.  I need to create a session with the correct mail box driver and simulate the rest of the system.  It wants the be passed an ImapMaster pointer, a SessionDriver point, and an InternetServer pointer.

DeleteMailbox is called in ImapSession::DeleteHandlerExecute

RenameMailbox is called in ImapSession::RenameHandler

MailboxOpen is called in ImapSession::SelectHandlerExecute

MailboxClose is called in ImapSession::~ImapSession, ImapSession::LogoutHandler, ImapSession::SelectHandlerExecute, ImapSession::CloseHandler

SubscribeMailbox is called in ImapSession::SubscribeHandlerExecute

AddMessageToMailbox is called in ImapSession::AppendHandlerExecute and ImapSession::CopyHandlerExecute

AppendDataToMessage is called in ImapSession::AppendHandler

DoneAppendingDataToMessage is called in ImapSession::AppendHandler (in two different places) and ImapSession::CopyHandlerExecute

ListDeletedMessages is called in ImapSession::CloseHandler, ImapSession::ExpungeHandler

ExpungeThisUid is called in ImapSession::FormatTaggedResponse, ImapSession::CloseHandler

GetMailboxCounts is called in ImapSession::StatusHandler

MessageList is called in ImapSession::UpdateSearchTerm

MessageUpdateFlags is called in ImapSession::FetchHandlerExecute, ImapSession::StoreHandler

MailboxFlushBuffers is called in ImapSession::CheckHandler

MailboxUpdateStats is called in ImapSession::AsynchronousEvent and ImapSession::CheckHandler

DeleteMessage is called in ImapSession::AppendHandler and ImapSession::CopyHandlerExecute

OpenMessageFile is called in ImapSession::SendMessageChunk and ImapSession::CopyHandlerExecute

MailboxLock is called in ImapSession::SearchHandlerExecute and ImapSession::FetchHandlerExecute

MailboxUnlock is called in ImapSession::SearchHandlerExecute and ImapSession::FetchHandlerExecute
=========
Namespace will never return a fail to MailboxClose, but it will retry that operation until it is no
longer necessary to retry.  I need to figure out how to test that, but that is a substantially
different circumstance.  The MailboxClose will be called from Namespace::MailboxUpdateStats.  THAT
will have to be tested.

(Done) CREATE calls CreateMailbox

(Done) DELETE calls DeleteMailbox

(Done) RENAME calls RenameMailbox

(Done) SELECT calls MailboxOpen, MailboxClose
  Need to check to make sure that the open mailbox is eventually closed in the retry loop

(Done) EXAMINE calls MailboxOpen, MailboxClose
  Need to check to make sure that the open mailbox is eventually closed in the retry loop

ImapSession::~ImapSession calls MailboxClose (This needs to not retry)
  Need to check to make sure that the open mailbox is eventually closed in the retry loop

LOGOUT calls MailboxClose 

(Done) CLOSE calls lock, MailboxClose, ListDeletedMessages, ExpungeThisUid, unlock

(Done) SUBSCRIBE calls SubscribeMailbox

(Done, partly) APPEND calls lock, AddMessageToMailbox, AppendDataToMessage, DoneAppendingDataToMessage, and DeleteMessage, unlock
  This needs to do a lock at the beginning, and an unlock at the end
  Except the lock that I have doesn't work without selecting a mailbox and so I'm segfaulting.  Alas.

(Done, partly) COPY calls lock, AddMessageToMailbox, AppendDataToMessage, DoneAppendingDataToMessage, OpenMessageFile, and DeleteMessage, unlock
  This needs to do a lock at the beginning, and an unlock at the end
  Except the lock that I have locks the selected mailbox and I need to look this one AND the one I'm copying the message to.

EXPUNGE calls ListDeletedMessages

Oh, jeez!  FormatTaggedResponse calls ExpungeThisUid at the end of the successful conclusion of ANY command, if that command has executed in a session in the "Selected" state, that command has "sendUpdateStatus" enabled and a UID has to be expunged.  That's, um, a lot of possible commands, and it's hard to test.  I think I want to send the expunge message only after expungeThisUid returns successfully, so retries aren't at issue.
(NOT TESTED) ImapSession::FormatTaggedResponse calls ExpungeThisUid

STATUS calls GetMailboxCounts

SEARCH calls MessageList, MailboxLock, and MailboxUnlock

FETCH calls OpenMessageFile, MessageUpdateFlags, MailboxLock, and MailboxUnlock

STORE calls MessageUpdateFlags

CHECK calls MailboxFlushBuffers and MailboxUpdateStats

AsynchronousEvent?  Well, shoot.  I need to make sure I ignore errors and retries aren't at issue.

ImapSession::AsynchronousEvent calls MailboxUpdateStats.  I need to add asynchronous handling of closing a mailbox at the end of a session when it's inappropriate to make the user wait for the close to complete.  It should just keep trying and trying in AsynchronousEvent until it succeeds.

Other tests required:
Test to see if an orphaned mailbox is restored to non-orphaned status when the mail box is opened again
Test to see if an orphaned mailbox finally gets closed


===========================================================================
ENUMERATED TEST CASES
Case 1: Creation failure
Attempt to create a mail folder, but lock causes the creation to fail.

Case 2: Creation success
Attempt to create a mail folder, which succeeds
